<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on devseunggwan</title><link>https://devseunggwan.github.io/docs/tech/python/</link><description>Recent content in Python on devseunggwan</description><generator>Hugo</generator><language>ko-kr</language><atom:link href="https://devseunggwan.github.io/docs/tech/python/index.xml" rel="self" type="application/rss+xml"/><item><title>VSCode Python 익스텐션 에러 트러블 슈팅 (Failed to resolve env)</title><link>https://devseunggwan.github.io/docs/tech/python/vscode-python-failed-to-resolve-env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/python/vscode-python-failed-to-resolve-env/</guid><description>&lt;h1 id="vscode-python-익스텐션-에러-트러블-슈팅-failed-to-resolve-env">
 VSCode Python 익스텐션 에러 트러블 슈팅 (Failed to resolve env)
 &lt;a class="anchor" href="#vscode-python-%ec%9d%b5%ec%8a%a4%ed%85%90%ec%85%98-%ec%97%90%eb%9f%ac-%ed%8a%b8%eb%9f%ac%eb%b8%94-%ec%8a%88%ed%8c%85-failed-to-resolve-env">#&lt;/a>
&lt;/h1>
&lt;h3 id="문제-상황">
 문제 상황
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%ec%83%81%ed%99%a9">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>VSCode 내부에서 Intelisense와 Python이 충돌하였다고 알림이 계속 나왔었고 파이썬을 로드하는 상태였습니다.&lt;/li>
&lt;li>이로 인해서 Python 관련 VScode 익스텐션이 제대로 동작하지 않았습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="문제-해결-방식">
 문제 해결 방식
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%ed%95%b4%ea%b2%b0-%eb%b0%a9%ec%8b%9d">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li> 먼저 VSCode Python 출력창에서 문제가 발생하는 내용을 확인하고 키워드를 통해서 구글링하였습니다.
&lt;ul>
&lt;li>&lt;code>Python Extension: interpreterManager.refresh [l [Error]: Failed to resolve env&lt;/code> &lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>구글링을 했을 때 많은 사람들은 &lt;code>Python.Locator&lt;/code>을 &lt;code>native&lt;/code>에서 &lt;code>js&lt;/code>로 변경하는방식으로 해결을 많은 사람들이 하였지만 변경하여도 문제는 계속 발생 하였습니다.
&lt;ul>
&lt;li>
 &lt;a href="https://github.com/microsoft/vscode-python/issues/23956">https://github.com/microsoft/vscode-python/issues/23956&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>출력창의 Python 익스텐션 에러를 분석했을 때, 이전에 가상환경으로 사용하고 지웠는데 계속 파이썬 익스텐션에서 로드하고 있었고 이로 인해서 에러를 뱉어내고 있었습니다. &lt;/li>
&lt;li>그래서 &lt;code>Python: 캐시 지우기 및 창 다시 로드(Python: Clear Cache and Reload Window)&lt;/code> 기능을 사용하여 캐싱을 지웠습니다. 캐싱을 지우니까 정상적으로 익스텐션들을 로드하는 것을 확인할 수 있었습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="문제-발생-원인">
 문제 발생 원인
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%eb%b0%9c%ec%83%9d-%ec%9b%90%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>당시 Github Codespace에서 Attention 관련 논문을 읽고 샘플 코드들을 작성하면서 학습하는 과정이였습니다. &lt;/li>
&lt;li>그 과정에서 코드에 사용되는 Python 의존성들을 다운받는 과정을 거쳤습니다. 그런데 그 과정에서 Codespace 용량(32G)을 생각하지 않고 pip install을 진행하였습니다. 그래서 다운로드를 계속 받는데 용량을 가득 채우는 상황이 발생하였고, 급하게 종료를 눌렸습니다. &lt;/li>
&lt;li>그 과정에서 Python 익스텐션의 내부 동작까지 확인할 수는 없지만, 가상 환경이 계속 캐싱이 되어 있었던 상황이였던거 같고 이후 Codespace를 삭제하였습니다. Codespace로 작업한 동일 Repo를 로드할 때부터 에러는 계속 발생하였습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="개선-방향">
 개선 방향
 &lt;a class="anchor" href="#%ea%b0%9c%ec%84%a0-%eb%b0%a9%ed%96%a5">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>VSCode 익스텐션에서 에러가 발생하는 경우가 있으면, 캐싱이 되어 있을 수 있다는 선택지를 생각해야 한다고 생각합니다. 익스텐션에서 캐싱을 지우는 방법을 제공한다면 지우고 다시 확인해보아야 합니다.&lt;/li>
&lt;li>인공지능 관련 개발 시 버전 관리는 Github에 저장하되, Google Colab을 활용하여 실험을 할 수 있도록 하는 것이 합리적입니다. 인공지능 관련 작업을 할 때 GPU 리소스를 구글에서 무료로 사용할 수 있게 제공해주기 때문입니다. &lt;/li>
&lt;li>Codespace는 제한된 리소스 내에서 개발, 테스트를 해볼 수 있는 상황에서 더 활용하는 것이 좋다고 생각합니다. 많은 리소스를 제공하는 것은 아니지만, 무료로독립된 환경에서 간편하게 사용하고 종료할 수 있기 때문에 리소스가 많이 들어가지 않는 개발을 할 때 Codespace를 사용하는게 합리적입니다.&lt;/li>
&lt;/ul></description></item><item><title>폐쇄망에 Python 설치 (Rocky Linux 8.10, UV 사용)</title><link>https://devseunggwan.github.io/docs/tech/python/python-rocky-linux-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/python/python-rocky-linux-installation/</guid><description>&lt;h1 id="폐쇄망에-python-설치-rocky-linux-810-uv-사용">
 폐쇄망에 Python 설치 (Rocky Linux 8.10, UV 사용)
 &lt;a class="anchor" href="#%ed%8f%90%ec%87%84%eb%a7%9d%ec%97%90-python-%ec%84%a4%ec%b9%98-rocky-linux-810-uv-%ec%82%ac%ec%9a%a9">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>폐쇄망 환경에 Python 환경을 배포하기 위한 과정을 정리하기 위해서 작성하였습니다.&lt;/li>
&lt;li>Python 가상 환경 및 Dependency 관리는 UV로 진행합니다. 그래서 UV 설치 과정이 포함되어 있습니다. &lt;/li>
&lt;li>Rochy-Linux 8.10, Python 3.12.8, UV 0.5.18 기준으로 작성하였습니다.&lt;/li>
&lt;/ul>
&lt;h2 id="1-dnf를-사용한-python-설치">
 1. dnf를 사용한 Python 설치
 &lt;a class="anchor" href="#1-dnf%eb%a5%bc-%ec%82%ac%ec%9a%a9%ed%95%9c-python-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h2>
&lt;h3 id="1-1-파일-다운로드">
 1-1. 파일 다운로드
 &lt;a class="anchor" href="#1-1-%ed%8c%8c%ec%9d%bc-%eb%8b%a4%ec%9a%b4%eb%a1%9c%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;h4 id="python-검색">
 Python 검색
 &lt;a class="anchor" href="#python-%ea%b2%80%ec%83%89">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>dnf를 사용하여 검색할 수 있는 Python 버전은 3.8, 3.9, 3.11, 3.12 입니다.&lt;/li>
&lt;li>Python 3.10은 dnf search 및 
 &lt;a href="https://docs.redhat.com/ko/documentation/red_hat_enterprise_linux/9/html/installing_and_using_dynamic_programming_languages/assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages#assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages">Red Hat 문서&lt;/a>에서 확인할 수 없었습니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>dnf search python
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="python-설치-파일-다운로드">
 Python 설치 파일 다운로드
 &lt;a class="anchor" href="#python-%ec%84%a4%ec%b9%98-%ed%8c%8c%ec%9d%bc-%eb%8b%a4%ec%9a%b4%eb%a1%9c%eb%93%9c">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>download-path에 Python을 다운로드 받을 폴더를 지정합니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dnf install --downloaddir &lt;span style="color:#f92672">{&lt;/span>download-path&lt;span style="color:#f92672">}&lt;/span> --downloadonly python3.12 python3.12-pip python3.12-devel -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="1-2-python-설치">
 1-2. Python 설치
 &lt;a class="anchor" href="#1-2-python-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>다운로드 받은 파일은 rpm 형태로 구성되어 있습니다. 지정한 download-path에 들어가서 설치 진행합니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rpm -ivh *.rpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="1-3-python-설치-확인">
 1-3. Python 설치 확인
 &lt;a class="anchor" href="#1-3-python-%ec%84%a4%ec%b9%98-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>설치가 되었다면 정상적으로 설치되었는 지 확인합니다. python 명령어로만 실행 시에는 에러가 발생합니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>python3 -V &lt;span style="color:#75715e"># OK&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3.12 -V &lt;span style="color:#75715e"># OK&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python &lt;span style="color:#75715e"># ERROR&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-uv-설치">
 2. UV 설치
 &lt;a class="anchor" href="#2-uv-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h2>
&lt;h3 id="2-1-파일-다운로드">
 2-1. 파일 다운로드
 &lt;a class="anchor" href="#2-1-%ed%8c%8c%ec%9d%bc-%eb%8b%a4%ec%9a%b4%eb%a1%9c%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Github Repo에 들어가서 UV Release를 확인하고, OS Version에 맞는 설치 파일을 다운로드 받습니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget https://github.com/astral-sh/uv/releases/download/0.5.18/uv-x86_64-unknown-linux-gnu.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-2-uv-설치">
 2-2. UV 설치
 &lt;a class="anchor" href="#2-2-uv-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>다운로드 받은 UV 파일을 압축 해제하고 해제한 파일들은 shell에서 사용할 수 있도록 조치해야 합니다.&lt;/li>
&lt;li>압축 해제 후 보안 이슈가 없다면 &lt;code>/usr/bin&lt;/code> 에 파일들을 욺겨서 사용할 수 있도록 합니다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>UV 스크립트로 설치하면 &lt;code>$HOME/.local/bin/env&lt;/code>에 설치된 파일들이 추가되고 사용하는 shell에 Path 환경 변수를 등록해야 합니다.&lt;/p></description></item></channel></rss>
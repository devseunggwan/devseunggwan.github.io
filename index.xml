<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>데브승관</title><link>https://devseunggwan.github.io/</link><description>Recent content on 데브승관</description><generator>Hugo</generator><language>ko-kr</language><atom:link href="https://devseunggwan.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Installation</title><link>https://devseunggwan.github.io/docs/tech/airbyte/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/airbyte/installation/</guid><description>&lt;h1 id="airbyte-설치-방법">
 Airbyte 설치 방법
 &lt;a class="anchor" href="#airbyte-%ec%84%a4%ec%b9%98-%eb%b0%a9%eb%b2%95">#&lt;/a>
&lt;/h1>
&lt;blockquote>
&lt;p>해당 문서에서는 docker-compose를 사용하여 airbyte를 설치하는 방법에 대해서 설명합니다.&lt;/p>&lt;/blockquote>
&lt;h3 id="선행조건">
 선행조건
 &lt;a class="anchor" href="#%ec%84%a0%ed%96%89%ec%a1%b0%ea%b1%b4">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>docker 및 docker-compose 설치&lt;/li>
&lt;li>git 설치(&lt;code>sudo apt-get install git&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h3 id="airbyte-다운로드">
 Airbyte 다운로드
 &lt;a class="anchor" href="#airbyte-%eb%8b%a4%ec%9a%b4%eb%a1%9c%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/airbytehq/airbyte.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="스크립트-실행">
 스크립트 실행
 &lt;a class="anchor" href="#%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8-%ec%8b%a4%ed%96%89">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Airbyte에서는 설치 및 배포 스크립트를 제공합니다.&lt;/li>
&lt;li>docker-compose 및 .env (Airbyte 설정 파일) 을 다운로드 합니다.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>options:
 -d --download Only download files - don&amp;#39;t run docker compose
 -r --refresh DELETE existing assets and re-download new ones
 -h --help Print this Help.
 -x --debug Verbose mode.
 -b --background Run docker compose up in detached mode.
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd airbyte
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./run-ab-platform.sh -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="airbyte-환경-설정">
 Airbyte 환경 설정
 &lt;a class="anchor" href="#airbyte-%ed%99%98%ea%b2%bd-%ec%84%a4%ec%a0%95">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>docker-compose 실행 이전, 운영하려는 환경에 대한 설정을 진행합니다.
&lt;ul>
&lt;li>Core, Secrets(Vault, GCP Secret store, AWS KMS), Database, Airbyte Service, Jobs, Connection, Logging, Monitoring, Worker, Launcher, Data Retention, docker, k8s 옵션 등 다양하게 존재하기 때문에 Reference을 보면서 설정하는 것이 좋습니다.&lt;/li>
&lt;li>
 &lt;a href="https://docs.airbyte.com/operator-guides/configuring-airbyte">https://docs.airbyte.com/operator-guides/configuring-airbyte&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="docker-compose-실행">
 docker-compose 실행
 &lt;a class="anchor" href="#docker-compose-%ec%8b%a4%ed%96%89">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker compose up -d &lt;span style="color:#f92672">(&lt;/span>./run-ab-platform.sh -b&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="airbyte-접속">
 Airbyte 접속
 &lt;a class="anchor" href="#airbyte-%ec%a0%91%ec%86%8d">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>http://localhost:8000/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
 &lt;a href="https://docs.airbyte.com/operator-guides/configuring-airbyte">https://docs.airbyte.com/operator-guides/configuring-airbyte&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Introduce</title><link>https://devseunggwan.github.io/docs/tech/js7-jobscheduler/introduce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/js7-jobscheduler/introduce/</guid><description>&lt;h1 id="js7-jobscheduler-controller-and-agent-개요">
 JS7 JobScheduler Controller and Agent 개요
 &lt;a class="anchor" href="#js7-jobscheduler-controller-and-agent-%ea%b0%9c%ec%9a%94">#&lt;/a>
&lt;/h1>
&lt;figure>&lt;img src="https://kb.sos-berlin.com/download/attachments/80971233/dashboard.png?version=1&amp;modificationDate=1681638984000&amp;api=v2" alt="이미지">&lt;figcaption>&lt;/figcaption>&lt;/figure>
&lt;p>독일 베를린의 소프트웨어 기업 SOS GmbH(Software- und Organisations-Service)가 개발한 제품으로, 엔터프라이즈급 스케줄러의 오픈소스화를 목표로 만들어졌습니다.&lt;/p>
&lt;ul>
&lt;li>홈페이지(회사): 
 &lt;a href="https://www.sos-berlin.com/en">https://www.sos-berlin.com/en&lt;/a>&lt;/li>
&lt;li>Documentation: 
 &lt;a href="https://kb.sos-berlin.com/display/JS7/JS7">https://kb.sos-berlin.com/display/JS7/JS7&lt;/a>&lt;/li>
&lt;li>이슈 추적: 
 &lt;a href="https://change.sos-berlin.com/secure/Dashboard.jspa">https://change.sos-berlin.com/secure/Dashboard.jspa&lt;/a>&lt;/li>
&lt;li>포럼: 
 &lt;a href="https://sourceforge.net/p/jobscheduler/discussion/">https://sourceforge.net/p/jobscheduler/discussion/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="라이센스-정책">
 라이센스 정책
 &lt;a class="anchor" href="#%eb%9d%bc%ec%9d%b4%ec%84%bc%ec%8a%a4-%ec%a0%95%ec%b1%85">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>JS7 JobScheduler와 YADE 제품은 고객에게 오픈 소스 라이선스와 상업용 라이선스 중에서 선택할 수 있는 듀얼 라이선스 모델로 제공합니다.
&lt;ul>
&lt;li>오픈 소스 라이선스 
 &lt;a href="https://www.gnu.org/licenses/gpl-3.0.en.html">GPLv3(일반 공중 라이선스)에 따라 제공&lt;/a>&lt;/li>
&lt;li>SOS의 상용 라이센스 구매&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>유일한 예외는 기업 고객을 위한 상업적으로 이용 가능한 기능인 고가용성을 위해 JS7 제품을 클러스터링하는 운영 기능&lt;/strong>
&lt;ul>
&lt;li>초기 해당 제품을 사용하여 피봇팅을 하는 경우 단일 컨트롤러에 독립형 에이전트를 여러개 사용할 수 있으나, 규모가 확장되고 SPOF를 피하는 목적으로 에이전트 클러스터링을 고려할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="아키텍처-구성요소">
 아키텍처 구성요소
 &lt;a class="anchor" href="#%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98-%ea%b5%ac%ec%84%b1%ec%9a%94%ec%86%8c">#&lt;/a>
&lt;/h2>
&lt;h3 id="controller">
 Controller
 &lt;a class="anchor" href="#controller">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>컨트롤러는 실행할 워크플로와 작업, 실행 시기, 실행에 사용할 에이전트를 알고 있습니다.&lt;/li>
&lt;li>컨트롤러는 JOC Cockpit에서 작업 관련 인벤토리를 수신하고 이 정보를 각 서버에서 워크플로우와 작업을 실행하는 에이전트에 배포합니다.&lt;/li>
&lt;li>독립형 컨트롤러는 에이전트를 오케스트레이션하는 단일 인스턴스입니다.&lt;/li>
&lt;li>할당하는 에이전트의 개수는 무제한입니다.&lt;/li>
&lt;/ul>
&lt;h3 id="agent">
 Agent
 &lt;a class="anchor" href="#agent">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>에이전트은 에이전트 서버에서 실행 파일 및 명령을 호출하는 작업을 실행합니다.&lt;/li>
&lt;li>에이전트는 컨트롤러로부터 시작할 잡과 시작 시점에 대한 정보를 받습니다.&lt;/li>
&lt;li>에이전트는 실행 결과와 로그 출력을 컨트롤러에 다시 보고합니다.&lt;/li>
&lt;li>에이전트는 작업 실행 시점에 컨트롤러가 연결되지 않아도 자율적으로 작동할 수 있습니다.&lt;/li>
&lt;li>독립형 에이전트는 서로 독립적으로 작동합니다.&lt;/li>
&lt;/ul>
&lt;h3 id="joc-cockpit">
 JOC Cockpit
 &lt;a class="anchor" href="#joc-cockpit">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>JOC Cockpit은 작업 관련 인벤토리를 관리하고 컨트롤러 및 에이전트의 워크플로 실행을 모니터링 및 제어하기 위한 사용자 인터페이스입니다.&lt;/li>
&lt;li>독립형 JOC Cockpit은 하나 이상의 컨트롤러를 관리하는 데 사용할 수 있는 단일 인스턴스입니다.&lt;/li>
&lt;/ul></description></item><item><title>Airbyte를 사용하여 MySQL to Snowflake 연결 시 고려 사항</title><link>https://devseunggwan.github.io/docs/tech/airbyte/mysql-to-snowflake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/airbyte/mysql-to-snowflake/</guid><description>&lt;h1 id="airbyte를-사용하여-mysql-to-snowflake-연결-시-고려-사항">
 Airbyte를 사용하여 MySQL to Snowflake 연결 시 고려 사항
 &lt;a class="anchor" href="#airbyte%eb%a5%bc-%ec%82%ac%ec%9a%a9%ed%95%98%ec%97%ac-mysql-to-snowflake-%ec%97%b0%ea%b2%b0-%ec%8b%9c-%ea%b3%a0%eb%a0%a4-%ec%82%ac%ed%95%ad">#&lt;/a>
&lt;/h1>
&lt;figure>&lt;img src="images/mysql-to-snowflake.png" alt="이미지">&lt;figcaption>&lt;/figcaption>&lt;/figure>
&lt;h2 id="개요">
 개요
 &lt;a class="anchor" href="#%ea%b0%9c%ec%9a%94">#&lt;/a>
&lt;/h2>
&lt;p>EC2 내부에 docker-compose를 사용하여 Airbyte를 생성하고, Source는 AWS RDS 위에 운영되는 MySQL, Destination은 Snowflake로 각각 커넥터 설정을 하였습니다. 환경을 구성 후 CDC를 진행하며 겪었던 상황과 해결 방법을 작성하였습니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-mysql에서-1억건-이상의-테이블에-대한-초기-마이그래이션-시-리소스-고려">
 1. MySQL에서 1억건 이상의 테이블에 대한 초기 마이그래이션 시 리소스 고려
 &lt;a class="anchor" href="#1-mysql%ec%97%90%ec%84%9c-1%ec%96%b5%ea%b1%b4-%ec%9d%b4%ec%83%81%ec%9d%98-%ed%85%8c%ec%9d%b4%eb%b8%94%ec%97%90-%eb%8c%80%ed%95%9c-%ec%b4%88%ea%b8%b0-%eb%a7%88%ec%9d%b4%ea%b7%b8%eb%9e%98%ec%9d%b4%ec%85%98-%ec%8b%9c-%eb%a6%ac%ec%86%8c%ec%8a%a4-%ea%b3%a0%eb%a0%a4">#&lt;/a>
&lt;/h2>
&lt;p>Airbyte는 CDC 이전 초기 연결 시 테이블에 대해 Source에서 Destination으로 마이그래이션을 진행합니다. 마이그래이션 시 RDS 리소스도 중요하지만 EC2 리소스를 더 많이 사용합니다. RDS는 Task 당 커넥션을 하나만 사용하지만, EC2는 돌아가고 있는 모든 Task들을 관리해야 하기 때문입니다.&lt;/p></description></item><item><title>Installation</title><link>https://devseunggwan.github.io/docs/tech/js7-jobscheduler/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/js7-jobscheduler/installation/</guid><description>&lt;h1 id="js7-jobscheduler-controller-and-agent-설치-w-docker-compse">
 JS7 JobScheduler Controller and Agent 설치 (w/ docker-compse)
 &lt;a class="anchor" href="#js7-jobscheduler-controller-and-agent-%ec%84%a4%ec%b9%98-w-docker-compse">#&lt;/a>
&lt;/h1>
&lt;h2 id="1-공식-문서-참조-기준">
 1. 공식 문서 참조 기준
 &lt;a class="anchor" href="#1-%ea%b3%b5%ec%8b%9d-%eb%ac%b8%ec%84%9c-%ec%b0%b8%ec%a1%b0-%ea%b8%b0%ec%a4%80">#&lt;/a>
&lt;/h2>
&lt;blockquote class="book-hint info">
&lt;p>현재 Alpine 기본 이미지와 OpenJDK와 함께 제공되는 Linux 기반 
 &lt;a href="https://opencontainers.org/">OCI&lt;/a> 호환 컨테이너 이미지 에서 제공 &lt;br>
2025.01.03 기준 2.5.0 버전으로 공식 문서에 적혀있어서 참조하였습니다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="1-1-dotenv-설정">
 1-1. dotenv 설정
 &lt;a class="anchor" href="#1-1-dotenv-%ec%84%a4%ec%a0%95">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>docker-compose 내 설정 값으로 들어가야 하는 항목들을 지정합니다.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>JS7USERID=1000
JS7GROUPID=0
JS7VERSION=2-5-0
&lt;/code>&lt;/pre>&lt;h3 id="1-2-agent">
 1-2. Agent
 &lt;a class="anchor" href="#1-2-agent">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>docker-compose.yml 을 다운로드 받습니다.&lt;/li>
&lt;li>agent의 Volume이 마운트 되는 폴더를 생성합니다.
&lt;ol>
&lt;li>&lt;code>mkdir js7-agent-primary&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>docker-compose를 실행합니다.
&lt;ol>
&lt;li>dotenv를 적용해야 합니다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker compose --env-file ./.env -f docker-compose.yml up -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;details>
&lt;summary>&lt;a href="https://kb.sos-berlin.com/download/attachments/80970104/docker-compose.yml?version=2&amp;#x26;modificationDate=1654531801000&amp;#x26;api=v2">docker-compose.yml&lt;/a>&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">js7-agent-primary&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">sosberlin/js7:agent-${JS7VERSION}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hostname&lt;/span>: &lt;span style="color:#ae81ff">js7-agent-primary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">js7-agent-primary:/var/sos-berlin.com/js7/agent/var_4445&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">js7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">RUN_JS_JAVA_OPTIONS&lt;/span>: -&lt;span style="color:#ae81ff">Xmx256m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">RUN_JS_USER_ID&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;${JS7USERID}:${JS7GROUPID}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">js7&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">js7-agent-primary&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">driver&lt;/span>: &lt;span style="color:#ae81ff">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">driver_opts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">none&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">device&lt;/span>: &lt;span style="color:#ae81ff">${PWD}/js7-agent-primary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">o&lt;/span>: &lt;span style="color:#ae81ff">bind&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;h3 id="1-3-controller">
 1-3. Controller
 &lt;a class="anchor" href="#1-3-controller">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>docker-compose.yml 을 다운로드 받습니다.&lt;/li>
&lt;li>controller의 Volume이 마운트 되는 폴더를 생성합니다.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>mkdir js7-controller-primary
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>docker-compose를 실행합니다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker compose --env-file ./.env -f docker-compose.yml up -d 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;details>
&lt;summary>&lt;a href="https://kb.sos-berlin.com/download/attachments/80970088/docker-compose.yml?version=1&amp;#x26;modificationDate=1654530751000&amp;#x26;api=v2">docker-compose.yml&lt;/a>&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">js7-controller-primary&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">sosberlin/js7:controller-${JS7VERSION}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hostname&lt;/span>: &lt;span style="color:#ae81ff">js7-controller-primary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">js7-controller-primary:/var/sos-berlin.com/js7/controller/var&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">js7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">RUN_JS_JAVA_OPTIONS&lt;/span>: -&lt;span style="color:#ae81ff">Xmx256m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">RUN_JS_USER_ID&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;${JS7USERID}:${JS7GROUPID}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">networks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">js7&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">js7-controller-primary&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">driver&lt;/span>: &lt;span style="color:#ae81ff">local&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">driver_opts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">none&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">device&lt;/span>: &lt;span style="color:#ae81ff">${PWD}/js7-controller-primary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">o&lt;/span>: &lt;span style="color:#ae81ff">bind&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">o&lt;/span>: &lt;span style="color:#ae81ff">bind&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;h3 id="1-4-joc-cockpit">
 1-4. JOC Cockpit
 &lt;a class="anchor" href="#1-4-joc-cockpit">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>MySQL, PostgreSQL 두가지 종류의 DB를 지원합니다. &lt;br>
(이 중 MySQL을 사용한 설치 예시를 작성하였습니다.)&lt;/p></description></item><item><title>Airbyte 운용 시 디스크 용량이 많이 찼을 때 확인해볼 수 있는 것들</title><link>https://devseunggwan.github.io/docs/tech/airbyte/disk-issue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/airbyte/disk-issue/</guid><description>&lt;h1 id="airbyte-운용-시-디스크-용량이-많이-찼을-때-확인해볼-수-있는-것들">
 Airbyte 운용 시 디스크 용량이 많이 찼을 때 확인해볼 수 있는 것들
 &lt;a class="anchor" href="#airbyte-%ec%9a%b4%ec%9a%a9-%ec%8b%9c-%eb%94%94%ec%8a%a4%ed%81%ac-%ec%9a%a9%eb%9f%89%ec%9d%b4-%eb%a7%8e%ec%9d%b4-%ec%b0%bc%ec%9d%84-%eb%95%8c-%ed%99%95%ec%9d%b8%ed%95%b4%eb%b3%bc-%ec%88%98-%ec%9e%88%eb%8a%94-%ea%b2%83%eb%93%a4">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;img src="https://upload.cafenono.com/image/slashpagePost/20241110/222409_PEKV2oTgrEwYaBqdDl?q=80%5c&amp;amp;s=1280x180%5c&amp;amp;t=outside%5c&amp;amp;f=webp" alt="images" />&lt;/p>
&lt;h2 id="개요">
 &lt;strong>개요&lt;/strong>
 &lt;a class="anchor" href="#%ea%b0%9c%ec%9a%94">#&lt;/a>
&lt;/h2>
&lt;p>Airbyte를 EC2에서 운영하다보면 어느 시점에 할당한 디스크 용량이 부족한 경우가 발생할 때가 있습니다. 해당 이슈를 탐지하지 못하는 경우에 디스크 용량이 꽉차게 되어 Airbyte가 동작하지 않는 상황이 발생할 수 있습니다. 이 경우 &lt;code>CDC(Change Data Capture)&lt;/code>가 정지되기 때문에 미리 대응하는 것이 중요합니다.&lt;/p>
&lt;hr>
&lt;h2 id="airbyte-운용-시-디스크-용량을-많이-차지하는-요소-확인">
 &lt;strong>Airbyte 운용 시 디스크 용량을 많이 차지하는 요소 확인&lt;/strong>
 &lt;a class="anchor" href="#airbyte-%ec%9a%b4%ec%9a%a9-%ec%8b%9c-%eb%94%94%ec%8a%a4%ed%81%ac-%ec%9a%a9%eb%9f%89%ec%9d%84-%eb%a7%8e%ec%9d%b4-%ec%b0%a8%ec%a7%80%ed%95%98%eb%8a%94-%ec%9a%94%ec%86%8c-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h2>
&lt;p>Airbyte는 &lt;code>Source&lt;/code>와 &lt;code>Destination&lt;/code>을 연결하는 커넥터를 설정 후 사용하는 방식입니다. 각각은 도커 컨테이너로 구성되어 있고 커넥터의 업데이트 시에는 컨테이너 이미지를 다운로드 받아 사용합니다. 사용자가 설정한 시간에 각 단위 별로 커넥터가 동작하는 것을 Task라 하는데, 동작하는 위치마다 로그가 발생하게 됩니다.&lt;/p></description></item><item><title>Configuration</title><link>https://devseunggwan.github.io/docs/tech/js7-jobscheduler/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/js7-jobscheduler/configuration/</guid><description>&lt;h1 id="js7-jobscheduler-controller-and-agent-초기-접속-설정w-docker-compose">
 JS7 JobScheduler Controller and Agent 초기 접속 설정(w/ docker-compose)
 &lt;a class="anchor" href="#js7-jobscheduler-controller-and-agent-%ec%b4%88%ea%b8%b0-%ec%a0%91%ec%86%8d-%ec%84%a4%ec%a0%95w-docker-compose">#&lt;/a>
&lt;/h1>
&lt;h2 id="로그인-및-controller-설정">
 로그인 및 Controller 설정
 &lt;a class="anchor" href="#%eb%a1%9c%ea%b7%b8%ec%9d%b8-%eb%b0%8f-controller-%ec%84%a4%ec%a0%95">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
 &lt;a href="http://localhost:4446/joc/#/login">http://localhost:4446/joc/#/login&lt;/a> 로 접속합니다.&lt;/li>
&lt;li>ID, PW
&lt;ol>
&lt;li>ID: root&lt;/li>
&lt;li>PW: root&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>접속 후 비밀번호 변경 창이 나오고 변경 진행&lt;/li>
&lt;li>Controller URL를 설정하는 창이 나오는데 &lt;code>URL for JOC Cockpit&lt;/code>에 &lt;code>http://{controller-docker-name}:4444&lt;/code> 로 작성합니다.
&lt;ol>
&lt;li>클러스터 옵션을 사용하려면 라이센스가 필요합니다.&lt;/li>
&lt;li>&lt;code>docker ps&lt;/code> 를 실행하여 컨테이너 이름를 확인하고, URL에 기입합니다.
&lt;ol>
&lt;li>ex) http://js7-controller-primary-1:4444&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>
 &lt;img src="images/configuration-1.png" alt="config-1" />&lt;/p>
&lt;ol start="5">
&lt;li>접속되며 메인 화면이 나옵니다.&lt;/li>
&lt;/ol>
&lt;p>
 &lt;img src="images/configuration-2.png" alt="config-2" />&lt;/p>
&lt;hr>
&lt;h2 id="agent-설정">
 Agent 설정
 &lt;a class="anchor" href="#agent-%ec%84%a4%ec%a0%95">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>1시 방향에 있는 설정 아이콘 &amp;gt; &lt;code>Manage Controllers/Agents&lt;/code> 를 클릭합니다.&lt;/li>
&lt;/ol>
&lt;p>
 &lt;img src="images/configuration-3.png" alt="config-3" />&lt;/p></description></item><item><title>AWS Lambda 사용 경험 정리</title><link>https://devseunggwan.github.io/docs/tech/aws/aws-lambda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/aws/aws-lambda/</guid><description>&lt;h1 id="aws-lambda-사용-경험-정리">
 AWS Lambda 사용 경험 정리
 &lt;a class="anchor" href="#aws-lambda-%ec%82%ac%ec%9a%a9-%ea%b2%bd%ed%97%98-%ec%a0%95%eb%a6%ac">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>AWS Lambda 를 활용해 스크래핑 및 API를 통해 다양한 데이터를 수집하는 프로젝트를 진행하며 여러 운영 관점에서 중요한 고려 사항들을 직접 체험할 수 있었습니다.&lt;/li>
&lt;li>Lambda를 사용하면서 마주한 비용 효율성, 리소스 관리, 모니터링, 디버깅 및 AWS의 기타 서비스와의 연계 시 고려해야 할 사항들을 정리 하였습니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="lambda-운영-관점에서의-고려-사항">
 Lambda 운영 관점에서의 고려 사항
 &lt;a class="anchor" href="#lambda-%ec%9a%b4%ec%98%81-%ea%b4%80%ec%a0%90%ec%97%90%ec%84%9c%ec%9d%98-%ea%b3%a0%eb%a0%a4-%ec%82%ac%ed%95%ad">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Lambda를 사용해서 소규모 작업 등을 자동화하여 관리할 때는 비용 및 리소스 관리 효율적입니다.
&lt;ul>
&lt;li>다만, 파이프라인 규모가 점차 늘어나서 대규모로 작업이 되어야 한다면 EC2 운용 비용보다 비싸지는 지점이 존재합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메모리 총 사용량을 사용자가 지정할 수 있고, 사용한 메모리량에 따라 CPU 스펙과 비용이 최종 결정됩니다.
&lt;ul>
&lt;li>그렇기 떄문에 100만건 무료라도 많은 양의 메모리를 계속해서 사용한다면 프리티어를 금방 소진할 가능성이 높습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lambda의 모니터링은 AWS Cloudwatch로 하기 때문에 해당 비용 관리도 신경써야 합니다.
&lt;ul>
&lt;li>로그를 통해서 작업 상태를 기록하는 것은 중요하지만, 많은 양의 로그를 Cloudwatch로 적재하게 된다면 이 또한 비용이 많이 발생하게 됩니다.&lt;/li>
&lt;li>그렇기 때문에 개발 후 Lambda를 운영하면서 적절하게 Log가 기록되는 지를 검토해야 합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>만약 15분 이상 한 작업에 대해서 Lambda에서 돌려야 한다면 동시성을 증가시켜 최대한 분산 처리를 하는 것을 추천드립니다.
&lt;ul>
&lt;li>재귀 방식으로 SQS, SNS, S3를 사용해 Lambda를 실행했을 때 최대 16번 이후로 
 &lt;a href="https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/invocation-recursion.html">재귀 루프 감지&lt;/a>를 하게 됩니다. 이 경우 Lambda에서는 이벤트를 드랍하기 때문에 더 이상 실행할 수 없습니다. 강제로 재귀 루프 감지를 해제할 수는 있지만, 의도치 않은 상황에서 큰 리소스를 사용할 수 있기 때문입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>되도록 ARM 아키텍처를 Lambda에서 선택하여 사용하였습니다.
&lt;ul>
&lt;li>비용 및 성능이 기본적으로 x64 아키텍처보다 좋고, 컴퓨팅 운영을 사용자가 하지 않아도 되기 때문에 다른 서비스에서의 ARM 아키텍처 사용 난이도보다 비교적 낮기 때문입니다.&lt;/li>
&lt;li>다만, 사용하는 언어나 비즈니스 로직에서 사용해야 하는 라이브러리 별로 제약 사항이 존재하기 떄문에 테스트 및 검토 후 사용해야 합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="python을-사용한-lambda-함수-작성-시-고려-사항">
 Python을 사용한 Lambda 함수 작성 시 고려 사항
 &lt;a class="anchor" href="#python%ec%9d%84-%ec%82%ac%ec%9a%a9%ed%95%9c-lambda-%ed%95%a8%ec%88%98-%ec%9e%91%ec%84%b1-%ec%8b%9c-%ea%b3%a0%eb%a0%a4-%ec%82%ac%ed%95%ad">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
 &lt;a href="https://github.com/keithrozario/Klayers">Klayer&lt;/a> 를 사용하여 Lambda에서 Python 실행 시 필요한 라이브러리를 가져왔습니다.
&lt;ul>
&lt;li>Lambda에서 Python 라이브러리를 사용할 때는 각 함수 별로 계층을 추가해서 사용해야 합니다. 매번 필요한 라이브러리를 정리해서 Lambda 계층을 만드는 것이 번거로운 작업이라 생각했습니다.&lt;/li>
&lt;li>Lambda에서는 단순한 작업이 주로 이루어지는 것이 좋기 때문에 Klayer에서 제공해주는 라이브러리 내에서 최대한 처리하려고 하였습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Python 라이브러리를 직접 Layer에 추가하는 경우는 다음과 같았습니다.
&lt;ul>
&lt;li>비즈니스 로직에 맞는 Klayer Layer가 없는 경우&lt;/li>
&lt;li>Klayer Layer를 사용했는데 250MB Layer 용량 제한에 걸린 경우&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
 &lt;a href="https://docs.powertools.aws.dev/lambda/python/3.8.0/">AWS Powertools&lt;/a>를 사용하여 Lambda에서 로깅이나 모니터링 등 기능들을 추가할 수 있습니다.
&lt;ul>
&lt;li>Lambda를 처음 작업 시에 디버깅이 쉽지 않았던 경험이 있었습니다. 디버깅을 하기 위해 직접 코드를 작성할 필요 없이 AWS Powertool 에서 제공하는 기능을 사용하여 해결하였습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aws-sqssimple-queue-service와-연동하여-사용-시-고려-사항">
 AWS SQS(Simple Queue Service)와 연동하여 사용 시 고려 사항
 &lt;a class="anchor" href="#aws-sqssimple-queue-service%ec%99%80-%ec%97%b0%eb%8f%99%ed%95%98%ec%97%ac-%ec%82%ac%ec%9a%a9-%ec%8b%9c-%ea%b3%a0%eb%a0%a4-%ec%82%ac%ed%95%ad">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Lambda에서 SQS 이벤트를 Consuming하는 Window Size에 따라서 처리하는 Lambda의 동시성의 차이가 발생할 수 있습니다.
&lt;ul>
&lt;li>만약 10개의 이벤트를 SQS로 날리고 Lambda에서의 Window size가 5라면 실행 시간이 충분히 길다 가정하여 2개의 동시성을 가집니다.&lt;/li>
&lt;li>Lambda의 동시성은 1000이기 떄문에 처리하려는 비즈니스 요구사항에 따라서 Window Size를 조정하여 동시성을 낮춰야 합니다.&lt;/li>
&lt;li>Window size에 따른 메시지를 처리할 수 있도록 구성해야 하고, 반대로 Window size가 너무 커서 Lambda가 전부 처리하지 못해 타임아웃이 나는 사항을 고려해야 합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
 &lt;a href="https://docs.aws.amazon.com/ko_kr/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-lambda-function-trigger.html">공식 문서&lt;/a>에서도 이야기되었지만, SQS의 가시성 제한 시간은 함수 타임 아웃의 6배로 설정해야 합니다.
&lt;ul>
&lt;li>이벤트가 실패할 경우, 재실행을 Lambda에서 할 수 있도록 설정해야 합니다. 네트워크 이슈나 원천 소스가 존재하는 서버의 이상으로 간헐적인 이슈가 발생할 수 있기 때문에 충분한 재실행으로 데이터를 수집할 수 있도록 하였습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="lambda-배포-관점에서-고려-사항">
 Lambda 배포 관점에서 고려 사항
 &lt;a class="anchor" href="#lambda-%eb%b0%b0%ed%8f%ac-%ea%b4%80%ec%a0%90%ec%97%90%ec%84%9c-%ea%b3%a0%eb%a0%a4-%ec%82%ac%ed%95%ad">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Lambda를 배포할 때 Terraform을 사용하여 배포하였습니다.
&lt;ul>
&lt;li>Lambda를 사용하다 보면 여러 함수들을 생성 및 관리해야 하는 경우가 발생하였고, 이 때마다 계속 함수에 대한 설정을 GUI로 진행했는데 비효율적이였습니다.&lt;/li>
&lt;li>AWS SAM이나 Serverless Framework 등 Lambda를 개발할 떄 사용할 수 있는 도구들이 존재하였지만 해당 도구들은 POC를 진행 후 사용하지 않기로 결정했습니다.&lt;/li>
&lt;li>운영했던 Lambda는 EventBridge Scheduler, SQS 등도 함께 사용하여 데이터 파이프라인을 구성했기 때문에 해당 아키텍처를 함께 배포하거나 내려야 하는 등 요구사항도 존재하여, Terraform을 채택하였습니다.&lt;/li>
&lt;li>Python 코드와 Terraform 코드를 묶어서 관리하였고, 모노레포로 관리하여 효율성을 높혔습니다. 이렇게 작업했을 경우, Lambda 함수 및 플랫폼이 Git을 통한 버저닝과 CI/CD를 연결이 가능했습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Gitleak</title><link>https://devseunggwan.github.io/docs/tech/git/gitleaks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/git/gitleaks/</guid><description>&lt;h1 id="gitleaks">
 Gitleaks
 &lt;a class="anchor" href="#gitleaks">#&lt;/a>
&lt;/h1>
&lt;p>Gitleaks는 Git 리포지토리의 비밀번호, API 키, 토큰과 같은 하드코딩 된 비밀을 감지하고 유출을 방지하는 SAST(Static Application Security Testing, 정적 어플리케이션 보안 테스트) 도구입니다.&lt;/p>
&lt;p>Go로 작성되었으며, Homebrew, Docker, Git Repo, Pre-commit, Github-Action 등으로 설치하여 사용할 수 있습니다.&lt;/p>
&lt;p>아래는 Homebrew를 통해서 맥 로컬에 설치하는 방법입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install gitleaks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gitleaks를 통해서 찾을 수 있는 비밀은 여러가지가 있고, 
 &lt;a href="https://github.com/gitleaks/gitleaks/blob/master/cmd/generate/config/main.go">Github Repo&lt;/a>에서 각 규칙(총 137가지)들을 확인할 수 있습니다.&lt;/p>
&lt;p>Gitleaks를 만약 로컬에 설치했다면, 실행하는 방법은 다음과 같습니다.&lt;/p></description></item><item><title>UnstructuredURLLoader 무한 로딩 해결</title><link>https://devseunggwan.github.io/docs/tech/langchain/issue-unstructuredurlloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/langchain/issue-unstructuredurlloader/</guid><description>&lt;h1 id="unstructuredurlloader-무한-로딩-해결">
 UnstructuredURLLoader 무한 로딩 해결
 &lt;a class="anchor" href="#unstructuredurlloader-%eb%ac%b4%ed%95%9c-%eb%a1%9c%eb%94%a9-%ed%95%b4%ea%b2%b0">#&lt;/a>
&lt;/h1>
&lt;h2 id="요약">
 요약
 &lt;a class="anchor" href="#%ec%9a%94%ec%95%bd">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>UnstructedURLLoader에서 사용하는 라이브러리 중 
 &lt;a href="https://github.com/Unstructured-IO/unstructured/blob/main/unstructured/file_utils/filetype.py">unstructured.file_utils.filetype&lt;/a> 에서 python-magic 라이브러리를 로드할 때 발생하는 이슈였습니다.&lt;/li>
&lt;li>해당 라이브러리를 사용할 떄는 OS 별로 다르게 magic 라이브러리의 종속성을 제공해야 합니다. 그래서 Linux나 MacOS를 사용할 때는 Unstructed 기본 종속성으로 &lt;code>python-magic&lt;/code> 이 설치되어 문제가 없지만, Windows를 사용할 떄는 &lt;code>python-magic-bin&lt;/code> 을 사용하는 환경에 종속성을 추가해야 합니다.
&lt;ul>
&lt;li>Windows: &lt;code>python-magic-bin&lt;/code>&lt;/li>
&lt;li>Linux, MacOS: &lt;code>python-magic&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="상황-설명">
 상황 설명
 &lt;a class="anchor" href="#%ec%83%81%ed%99%a9-%ec%84%a4%eb%aa%85">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Windows 환경&lt;/code>에서 
 &lt;a href="https://huggingface.co/learn/cookbook/ko/advanced_ko_rag">Hugging-face Open-Source AI Cookbook&lt;/a> 를 보며 LLM 스터디를 진행하고 있었습니다.&lt;/li>
&lt;li>&lt;code>UnstructuredURLLoader&lt;/code>을 사용하여 페이지의 글자들을 가져올 떄 무한 로딩이 걸리는 이슈가 발생하였습니다. 30초 내외로 로드가 완료되어야 정상인데 2분 이상 로드가 완료되지 않는 현상이 발견되었습니다.&lt;/li>
&lt;li>Ubuntu 환경에서도 현상을 재현해보았지만 큰 문제가 없이 로드가 되어 사용할 수 있었습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="예시-코드">
 예시 코드
 &lt;a class="anchor" href="#%ec%98%88%ec%8b%9c-%ec%bd%94%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> langchain_community.document_loaders &lt;span style="color:#f92672">import&lt;/span> UnstructuredURLLoader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>version &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;v4.49.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>urls &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/pipeline_tutorial&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/autoclass_tutorial&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/preprocessing&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/training&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/run_scripts&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/tokenizer_summary&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/attention&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/pad_truncation&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/pipeline_webserver&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/tasks_explained&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/hpo_train&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/tasks/sequence_classification&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/tasks/token_classification&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/tasks/question_answering&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/tasks/language_modeling&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/tasks/masked_language_modeling&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/tasks/translation&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;lt;https://huggingface.co/docs/transformers/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ko/tasks/summarization&amp;gt;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>loader &lt;span style="color:#f92672">=&lt;/span> UnstructuredURLLoader(urls&lt;span style="color:#f92672">=&lt;/span>urls)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docs &lt;span style="color:#f92672">=&lt;/span> loader&lt;span style="color:#f92672">.&lt;/span>load()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="접근-방법">
 접근 방법
 &lt;a class="anchor" href="#%ec%a0%91%ea%b7%bc-%eb%b0%a9%eb%b2%95">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>네트워크가 제한된 망을 사용하고 있던 상황이라 네트워크 이슈라고 생각하여 HTTP 통신을 시도해보았습니다.
&lt;ol>
&lt;li>&lt;code>httpx&lt;/code> 를 사용하여 URL 중 하나에 get 요청을 보내어 정상적으로 요청을 받는 지 확인하였습니다.&lt;/li>
&lt;li>요청 결과는 정상적으로 받아왔었습니다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>라이브러리 자체의 문제라고 생각하여 Github에 있는 코드들을 확인 및 직접 실행하여 Blocking이 걸리는 부분을 확인하였습니다.
&lt;ol>
&lt;li>
 &lt;a href="https://github.com/langchain-ai/langchain/blob/7e62e3a137814b6813e11b602b2f78df1dec8d14/libs/community/langchain_community/document_loaders/url.py#L13C7-L13C28">UnstructuredURLLoader&lt;/a>&lt;/li>
&lt;li>
 &lt;a href="https://github.com/Unstructured-IO/unstructured/blob/347a4e5d9ee42f32c1186f0f0dada93bf9910778/unstructured/partition/auto.py#L30">unstructured.partition.auto.partition&lt;/a>&lt;/li>
&lt;li>
 &lt;a href="https://github.com/Unstructured-IO/unstructured/blob/main/unstructured/file_utils/filetype.py">unstructured.file_utils.filetype&lt;/a>&lt;/li>
&lt;li>importlib.import_module(&amp;ldquo;magic&amp;rdquo;)
&lt;ol>
&lt;li>importlib 자체는 라이브러리 로드가 되기 떄문에 magic 문제라 생각하고 magic을 실행하였습니다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>magic&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>python-magic&lt;/code> 라이브러리를 Windows에서 사용할 때 발생하는 원인 등을 조사하였습니다.
&lt;ol>
&lt;li>Windows에서는 python-magic 대신 &lt;code>python-magic-bin&lt;/code> 을 사용하여 magic 라이브러리를 사용할 수 있도록 해야 합니다.&lt;/li>
&lt;li>unstructed issue에 다른 유저가 관련 이슈를 올린 것을 확인하였습니다.
&lt;ol>
&lt;li>
 &lt;a href="https://github.com/Unstructured-IO/unstructured/issues/3438">https://github.com/Unstructured-IO/unstructured/issues/3438&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>최종적으로 &lt;code>python-magic-bin==0.4.14&lt;/code> 를 설치하였을 떄 정상적으로 작동하였습니다.&lt;/li>
&lt;/ol></description></item><item><title>VSCode Python 익스텐션 에러 트러블 슈팅 (Failed to resolve env)</title><link>https://devseunggwan.github.io/docs/tech/python/vscode-python-failed-to-resolve-env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/python/vscode-python-failed-to-resolve-env/</guid><description>&lt;h1 id="vscode-python-익스텐션-에러-트러블-슈팅-failed-to-resolve-env">
 VSCode Python 익스텐션 에러 트러블 슈팅 (Failed to resolve env)
 &lt;a class="anchor" href="#vscode-python-%ec%9d%b5%ec%8a%a4%ed%85%90%ec%85%98-%ec%97%90%eb%9f%ac-%ed%8a%b8%eb%9f%ac%eb%b8%94-%ec%8a%88%ed%8c%85-failed-to-resolve-env">#&lt;/a>
&lt;/h1>
&lt;h3 id="문제-상황">
 문제 상황
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%ec%83%81%ed%99%a9">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>VSCode 내부에서 Intelisense와 Python이 충돌하였다고 알림이 계속 나왔었고 파이썬을 로드하는 상태였습니다.&lt;/li>
&lt;li>이로 인해서 Python 관련 VScode 익스텐션이 제대로 동작하지 않았습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="문제-해결-방식">
 문제 해결 방식
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%ed%95%b4%ea%b2%b0-%eb%b0%a9%ec%8b%9d">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li> 먼저 VSCode Python 출력창에서 문제가 발생하는 내용을 확인하고 키워드를 통해서 구글링하였습니다.
&lt;ul>
&lt;li>&lt;code>Python Extension: interpreterManager.refresh [l [Error]: Failed to resolve env&lt;/code> &lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>구글링을 했을 때 많은 사람들은 &lt;code>Python.Locator&lt;/code>을 &lt;code>native&lt;/code>에서 &lt;code>js&lt;/code>로 변경하는방식으로 해결을 많은 사람들이 하였지만 변경하여도 문제는 계속 발생 하였습니다.
&lt;ul>
&lt;li>
 &lt;a href="https://github.com/microsoft/vscode-python/issues/23956">https://github.com/microsoft/vscode-python/issues/23956&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>출력창의 Python 익스텐션 에러를 분석했을 때, 이전에 가상환경으로 사용하고 지웠는데 계속 파이썬 익스텐션에서 로드하고 있었고 이로 인해서 에러를 뱉어내고 있었습니다. &lt;/li>
&lt;li>그래서 &lt;code>Python: 캐시 지우기 및 창 다시 로드(Python: Clear Cache and Reload Window)&lt;/code> 기능을 사용하여 캐싱을 지웠습니다. 캐싱을 지우니까 정상적으로 익스텐션들을 로드하는 것을 확인할 수 있었습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="문제-발생-원인">
 문제 발생 원인
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%eb%b0%9c%ec%83%9d-%ec%9b%90%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>당시 Github Codespace에서 Attention 관련 논문을 읽고 샘플 코드들을 작성하면서 학습하는 과정이였습니다. &lt;/li>
&lt;li>그 과정에서 코드에 사용되는 Python 의존성들을 다운받는 과정을 거쳤습니다. 그런데 그 과정에서 Codespace 용량(32G)을 생각하지 않고 pip install을 진행하였습니다. 그래서 다운로드를 계속 받는데 용량을 가득 채우는 상황이 발생하였고, 급하게 종료를 눌렸습니다. &lt;/li>
&lt;li>그 과정에서 Python 익스텐션의 내부 동작까지 확인할 수는 없지만, 가상 환경이 계속 캐싱이 되어 있었던 상황이였던거 같고 이후 Codespace를 삭제하였습니다. Codespace로 작업한 동일 Repo를 로드할 때부터 에러는 계속 발생하였습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="개선-방향">
 개선 방향
 &lt;a class="anchor" href="#%ea%b0%9c%ec%84%a0-%eb%b0%a9%ed%96%a5">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>VSCode 익스텐션에서 에러가 발생하는 경우가 있으면, 캐싱이 되어 있을 수 있다는 선택지를 생각해야 한다고 생각합니다. 익스텐션에서 캐싱을 지우는 방법을 제공한다면 지우고 다시 확인해보아야 합니다.&lt;/li>
&lt;li>인공지능 관련 개발 시 버전 관리는 Github에 저장하되, Google Colab을 활용하여 실험을 할 수 있도록 하는 것이 합리적입니다. 인공지능 관련 작업을 할 때 GPU 리소스를 구글에서 무료로 사용할 수 있게 제공해주기 때문입니다. &lt;/li>
&lt;li>Codespace는 제한된 리소스 내에서 개발, 테스트를 해볼 수 있는 상황에서 더 활용하는 것이 좋다고 생각합니다. 많은 리소스를 제공하는 것은 아니지만, 무료로독립된 환경에서 간편하게 사용하고 종료할 수 있기 때문에 리소스가 많이 들어가지 않는 개발을 할 때 Codespace를 사용하는게 합리적입니다.&lt;/li>
&lt;/ul></description></item><item><title>폐쇄망에 Python 설치 (Rocky Linux 8.10, UV 사용)</title><link>https://devseunggwan.github.io/docs/tech/python/python-rocky-linux-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devseunggwan.github.io/docs/tech/python/python-rocky-linux-installation/</guid><description>&lt;h1 id="폐쇄망에-python-설치-rocky-linux-810-uv-사용">
 폐쇄망에 Python 설치 (Rocky Linux 8.10, UV 사용)
 &lt;a class="anchor" href="#%ed%8f%90%ec%87%84%eb%a7%9d%ec%97%90-python-%ec%84%a4%ec%b9%98-rocky-linux-810-uv-%ec%82%ac%ec%9a%a9">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>폐쇄망 환경에 Python 환경을 배포하기 위한 과정을 정리하기 위해서 작성하였습니다.&lt;/li>
&lt;li>Python 가상 환경 및 Dependency 관리는 UV로 진행합니다. 그래서 UV 설치 과정이 포함되어 있습니다. &lt;/li>
&lt;li>Rochy-Linux 8.10, Python 3.12.8, UV 0.5.18 기준으로 작성하였습니다.&lt;/li>
&lt;/ul>
&lt;h2 id="1-dnf를-사용한-python-설치">
 1. dnf를 사용한 Python 설치
 &lt;a class="anchor" href="#1-dnf%eb%a5%bc-%ec%82%ac%ec%9a%a9%ed%95%9c-python-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h2>
&lt;h3 id="1-1-파일-다운로드">
 1-1. 파일 다운로드
 &lt;a class="anchor" href="#1-1-%ed%8c%8c%ec%9d%bc-%eb%8b%a4%ec%9a%b4%eb%a1%9c%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;h4 id="python-검색">
 Python 검색
 &lt;a class="anchor" href="#python-%ea%b2%80%ec%83%89">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>dnf를 사용하여 검색할 수 있는 Python 버전은 3.8, 3.9, 3.11, 3.12 입니다.&lt;/li>
&lt;li>Python 3.10은 dnf search 및 
 &lt;a href="https://docs.redhat.com/ko/documentation/red_hat_enterprise_linux/9/html/installing_and_using_dynamic_programming_languages/assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages#assembly_installing-and-using-python_installing-and-using-dynamic-programming-languages">Red Hat 문서&lt;/a>에서 확인할 수 없었습니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>dnf search python
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="python-설치-파일-다운로드">
 Python 설치 파일 다운로드
 &lt;a class="anchor" href="#python-%ec%84%a4%ec%b9%98-%ed%8c%8c%ec%9d%bc-%eb%8b%a4%ec%9a%b4%eb%a1%9c%eb%93%9c">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>download-path에 Python을 다운로드 받을 폴더를 지정합니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dnf install --downloaddir &lt;span style="color:#f92672">{&lt;/span>download-path&lt;span style="color:#f92672">}&lt;/span> --downloadonly python3.12 python3.12-pip python3.12-devel -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="1-2-python-설치">
 1-2. Python 설치
 &lt;a class="anchor" href="#1-2-python-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>다운로드 받은 파일은 rpm 형태로 구성되어 있습니다. 지정한 download-path에 들어가서 설치 진행합니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rpm -ivh *.rpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="1-3-python-설치-확인">
 1-3. Python 설치 확인
 &lt;a class="anchor" href="#1-3-python-%ec%84%a4%ec%b9%98-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>설치가 되었다면 정상적으로 설치되었는 지 확인합니다. python 명령어로만 실행 시에는 에러가 발생합니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>python3 -V &lt;span style="color:#75715e"># OK&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3.12 -V &lt;span style="color:#75715e"># OK&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python &lt;span style="color:#75715e"># ERROR&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-uv-설치">
 2. UV 설치
 &lt;a class="anchor" href="#2-uv-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h2>
&lt;h3 id="2-1-파일-다운로드">
 2-1. 파일 다운로드
 &lt;a class="anchor" href="#2-1-%ed%8c%8c%ec%9d%bc-%eb%8b%a4%ec%9a%b4%eb%a1%9c%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Github Repo에 들어가서 UV Release를 확인하고, OS Version에 맞는 설치 파일을 다운로드 받습니다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget https://github.com/astral-sh/uv/releases/download/0.5.18/uv-x86_64-unknown-linux-gnu.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-2-uv-설치">
 2-2. UV 설치
 &lt;a class="anchor" href="#2-2-uv-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>다운로드 받은 UV 파일을 압축 해제하고 해제한 파일들은 shell에서 사용할 수 있도록 조치해야 합니다.&lt;/li>
&lt;li>압축 해제 후 보안 이슈가 없다면 &lt;code>/usr/bin&lt;/code> 에 파일들을 욺겨서 사용할 수 있도록 합니다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>UV 스크립트로 설치하면 &lt;code>$HOME/.local/bin/env&lt;/code>에 설치된 파일들이 추가되고 사용하는 shell에 Path 환경 변수를 등록해야 합니다.&lt;/p></description></item></channel></rss>